trigger: none
pool:
  vmImage: ubuntu-latest
variables:
- group: ccms_secrets

parameters:
  - name: platform
    displayName: 'Platform'
    type: string
    default: 'Aws'
    values:
      - Aws
      - Azure

  - name: validateOnly
    type: boolean
    default: true
    displayName: 'Validate Only'

  - name: accountName
    type: string
    default: 'ccottrell@deloitte.com'
    displayName: 'Cloud account name or subscription name'

  - name: requestorEmail
    type: string
    default: 'ccottrell@deloitte.com'
    displayName: 'Requestor Email'

stages:   
  - stage: Decommision_${{ parameters.platform }}_Account
    displayName: "Decommision_${{ parameters.platform }}_Account_"
    jobs:
    - job: Retrieve_Token
      displayName: "Retrieve Cosmic Token"
      steps:
        - task: Bash@3
          name: get_jwt_token
          displayName: 'GET THE JWT TOKEN'
          inputs:
            targetType: inline
            script: |
              response=$(curl -s -X POST \
                --header 'Authorization:Basic Abcdefghijk==' \
                --header 'Accept:application/json' \
                --header 'Content-Type:application/x-www-form-urlencoded' \
                --data-urlencode 'grant_type=client_credentials' \
                --data-urlencode 'client_id=$(ccms_client_id)' \
                --data-urlencode 'resource=$(ccms_oauth_resource)' \
                --data-urlencode 'client_secret=$(ccms_client_secret)' \
                $(ccms_oauth_url))
              token=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['access_token'])")
              echo "##vso[task.setvariable variable=jwt;]$token"
              echo "##vso[task.setvariable variable=jwt_out;isOutput=true;]$token"


    - job: Display_Decommisioning_Accout_details
      displayName: "Check if the Account Already Exists"
      dependsOn: Retrieve_Token
      variables:
        token: $[ dependencies.Retrieve_Token.outputs['get_jwt_token.jwt_out'] ]
      steps:
        - script: |
            echo "############Extracting Data##############"
            json_body=$(cat << EOF
            {
              "technicalAdmin": null,
              "bundleId": null,
              "platform": "${{ parameters.platform }}",
              "cloudAccountId": null,
              "cmsCode": "dt-ccms",
              "function": null,
              "getAllItems": true
            }
            EOF
            )
            echo "$json_body"
            #GET CALL TO SEARCH API ENDPOINT
            response=$(curl -s -X GET \
              --header 'Content-Type: application/json' \
              --header "Authorization: Bearer $token" \
              -d "$json_body" \
              "$(cosmic_url)/api/v1/request/search")

            #Extract account details from  the search request response
            target_cloud_account_name="${{ parameters.accountName }}"
            clientname=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .name')
            bundle_id=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .bundleId')
            cloud_account_id=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .environments[] | select(.cloudAccountName == $cloud_account_name) | .cloudAccountId')
            env_identifier=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .environments[] | select(.cloudAccountName == $cloud_account_name) | .environmentIdentifier')
            technical_admin=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .contacts.TechnicalAdministrator')
            # Check if cloud_account_id is empty
            if [ -z "$cloud_account_id" ]; then
              echo "Cloud account ID not found, make sure the account was created through Cosmic."
              exit 1
            fi
            echo "================================================"
            echo -e "\033[1;31m[IMPORTANT]\033[0m Ensure you have backed up all necessary data before proceeding with decommissioning."
            echo "================================================"
            echo
            echo -e "\033[1m\033[4mDecommissioning Account Information:\033[0m"
            echo
            # Set the text color to red and make it bold
            RED_BOLD='\033[1m\033[31m'
            # Reset the text color and formatting to default
            NO_COLOR='\033[0m'
            YELLOW_BOLD='\033[1m\033[33m'

            echo -e "${YELLOW_BOLD}Decommissioning Account Information:${NO_COLOR}"
            echo -e "Platform: ${RED_BOLD}${{ parameters.platform }}${NO_COLOR}"
            echo -e "Client Name: ${RED_BOLD}$clientname${NO_COLOR}"
            echo -e "Cloud Account Name: ${RED_BOLD}${{ parameters.accountName }}${NO_COLOR}"
            echo -e "Environment: ${RED_BOLD}$env_identifier${NO_COLOR}"
            echo
            echo "================================================"
            echo -e "\033[1;31m[CRITICAL WARNING]\033[0m This action is irreversible. Proceed with caution."
            echo "================================================"

            echo "The Clientname is: $clientname"
            echo "The Bundle Id is: $bundle_id"
            echo "The Cloud Account Id is: $cloud_account_id"
            echo "The ENV: $env_identifier"
            echo "The tech Admin: $technical_admin"
            echo "##vso[task.setvariable variable=bundleId;isOutput=true;]$bundle_id"
            echo "##vso[task.setvariable variable=cloudAccountId;isOutput=true;]$cloud_account_id"
            echo "##vso[task.setvariable variable=envIdentifier;isOutput=true;]$env_identifier"
            echo "##vso[task.setvariable variable=technicalAdmin;isOutput=true;]$technical_admin"
          name: get_account_details


    - job: Decommissioning_Request_Body
      displayName: "Cosmic Body Deletion Request"
      variables:
        bundle_id: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.bundleId'] ]
        cloud_account_id: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.cloudAccountId'] ]
        env_identifier: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.envIdentifier'] ]
        technical_admin: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.technicalAdmin'] ]
      dependsOn: 
        - Display_Decommisioning_Accout_details
      condition: succeeded()
      steps:
        - script: |
            echo "########## Deletion Request Body Build ################"
            json_content=$(cat << EOF
            {
              "bundleId": $bundle_id,
              "validateOnly": ${{lower(parameters.validateOnly)}},
              "platform": "${{ parameters.platform }}",
              "environments": [{
                "environmentIdentifier": "$env_identifier",
                "cloudAccountId": "$cloud_account_id",
                "intent": "DELETE"
              }],
              "requestorEmail": "${{ parameters.requestorEmail }}",
              "notifyTo": [
                "dtechcommercialcms@deloitte.com"
              ],
              "contacts": {
                "technicalAdministrator": "$technical_admin"
              }
            }
            EOF
            )
            echo "$json_content" > jsonCosmicApiDeleteBody.json
            cat jsonCosmicApiDeleteBody.json
          displayName: 'Post Cosmic Deletion Request'
          
        - task: PublishBuildArtifacts@1
          displayName: 'Publish JSON Artifact'
          inputs:
            PathtoPublish: 'jsonCosmicApiDeleteBody.json'
            ArtifactName: 'sharedData'

    - job: WaitForValidation
      variables:
        clientName: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.clientName'] ]
        envIdentifier: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.envIdentifier'] ]
      dependsOn: 
        - Decommissioning_Request_Body
      # condition: eq(parameters.validateOnly, 'false')
      pool: server
      displayName: Wait for approval to create account
      timeoutInMinutes: 45
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 45 # task times out in 30 minutes
          inputs:
            notifyUsers: |
              zouassem@deloitte.fr
            instructions: |
              Please validate the decommissioning of the account with the following details:
                - Platform: ${{ parameters.platform }}
                - Client Name: $clientName
                - Cloud Account Name: ${{ parameters.accountName }}
                - Environment: $envIdentifier
              This action is irreversible. Proceed with caution.

    - job: Wait_for_request_completion
      condition: and(succeeded('Request_Account_Subscription'), eq(dependencies.Account_Check.outputs['accountCheck.skipSubsequentJobs'], 'false'))
      timeoutInMinutes: 30
      dependsOn: 
        - Retrieve_Token
        - WaitForValidation
      variables:
        token: $[ dependencies.Retrieve_Token.outputs['get_jwt_token.jwt_out'] ]
      steps:
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'sharedData'
            downloadPath: '$(System.DefaultWorkingDirectory)'
          displayName: 'Download the JSON'  

        - task: Bash@3
          name: delete_request_call
          displayName: 'Wait for the Environment creation to finish'
          inputs:
            targetType: 'inline'
            script: |
              response=$(curl -s -X POST \
                  --header 'Content-Type: application/json' \
                  --header "Authorization: Bearer $token" \
                  -d "$json_content" \
                  $(cosmic_url)/api/v1/request)
              echo "##[debug]Cosmic response:"
              echo $response | python -m json.tool
              location=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['location'])")
              echo "$location"
              echo "##vso[task.setvariable variable=location;isOutput=true;]$location"

        - task: Bash@3
          name: wait_for_request_completion
          displayName: 'Wait for the Environment creation to finish'
          inputs:
            targetType: 'inline'
            script: |
              SECONDS=0
              while true; do
                echo "##[warning]Checking completion every 60 seconds. $SECONDS seconds elapsed."
                sleep 30
                response=$(curl -s -X GET \
                  --header 'Content-Type:application/json' \
                  --header "Authorization:Bearer $token" \
                  $(cosmic_url)$location)
                echo "##[debug]Cosmic response:"
                echo $response | python -m json.tool
                isValid=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['isValid'])")
                hasError=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['hasError'])")
                isCompleted=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['isCompleted'])")
                if [[ -z $isValid || -z $hasError || -z $isCompleted ]]; then
                  echo "##vso[task.logissue type=error]Unknown Cosmic error"
                  exit 1
                fi
                if [[ "$isCompleted" == "True" ]]; then
                  if [[ "$isValid" == "True" ]] && [[ "$hasError" == "False" ]]; then
                    break
                  else
                    echo "##vso[task.logissue type=error]Cosmic sent back a validation error"
                    exit 2
                  fi
                fi
              done

  - stage: Decommision_${{ parameters.platform }}_Subscription
    condition: eq('${{ parameters.platform }}', 'Azure')
    displayName: "Decommision_${{ parameters.platform }}_Subscription_${{ parameters.accountName }}"
    jobs:
    - job: Retrieve_Token
      displayName: "Retrieve Cosmic Token"
      steps:
        - task: Bash@3
          name: get_jwt_token
          displayName: 'GET THE JWT TOKEN'
          inputs:
            targetType: inline
            script: |
              response=$(curl -s -X POST \
                --header 'Authorization:Basic Abcdefghijk==' \
                --header 'Accept:application/json' \
                --header 'Content-Type:application/x-www-form-urlencoded' \
                --data-urlencode 'grant_type=client_credentials' \
                --data-urlencode 'client_id=$(ccms_client_id)' \
                --data-urlencode 'resource=$(ccms_oauth_resource)' \
                --data-urlencode 'client_secret=$(ccms_client_secret)' \
                $(ccms_oauth_url))
              token=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['access_token'])")
              echo "##vso[task.setvariable variable=jwt;]$token"
              echo "##vso[task.setvariable variable=jwt_out;isOutput=true;]$token"


    - job: Display_Decommisioning_Accout_details
      displayName: "Check if the Account Already Exists"
      dependsOn: Retrieve_Token
      variables:
        token: $[ dependencies.Retrieve_Token.outputs['get_jwt_token.jwt_out'] ]
      steps:
        - script: |
            echo "############Extracting Data##############"
            json_body=$(cat << EOF
            {
              "technicalAdmin": null,
              "bundleId": null,
              "platform": "${{ parameters.platform }}",
              "cloudAccountId": null,
              "cmsCode": "dt-ccms",
              "function": null,
              "getAllItems": true
            }
            EOF
            )
            echo "$json_body"
            #GET CALL TO SEARCH API ENDPOINT
            response=$(curl -s -X GET \
              --header 'Content-Type: application/json' \
              --header "Authorization: Bearer $token" \
              -d "$json_body" \
              "$(cosmic_url)/api/v1/request/search")

            #Extract account details from  the search request response
            target_cloud_account_name="${{ parameters.accountName }}"
            clientname=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .name')
            bundle_id=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .bundleId')
            cloud_account_id=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .environments[] | select(.cloudAccountName == $cloud_account_name) | .cloudAccountId')
            env_identifier=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .environments[] | select(.cloudAccountName == $cloud_account_name) | .environmentIdentifier')
            technical_admin=$(echo $response | jq -r --arg cloud_account_name "$target_cloud_account_name" '.searchResults[] | select(.environments[].cloudAccountName == $cloud_account_name) | .contacts.TechnicalAdministrator')
            # Check if cloud_account_id is empty
            if [ -z "$cloud_account_id" ]; then
              echo "Cloud account ID not found, make sure the account was created through Cosmic."
              exit 1
            fi
            echo "================================================"
            echo -e "\033[1;31m[IMPORTANT]\033[0m Ensure you have backed up all necessary data before proceeding with decommissioning."
            echo "================================================"
            echo
            echo -e "\033[1m\033[4mDecommissioning Account Information:\033[0m"
            echo
            # Set the text color to red and make it bold
            RED_BOLD='\033[1m\033[31m'
            # Reset the text color and formatting to default
            NO_COLOR='\033[0m'
            YELLOW_BOLD='\033[1m\033[33m'

            echo -e "${YELLOW_BOLD}Decommissioning Account Information:${NO_COLOR}"
            echo -e "Platform: ${RED_BOLD}${{ parameters.platform }}${NO_COLOR}"
            echo -e "Client Name: ${RED_BOLD}$clientname${NO_COLOR}"
            echo -e "Cloud Account Name: ${RED_BOLD}${{ parameters.accountName }}${NO_COLOR}"
            echo -e "Environment: ${RED_BOLD}$env_identifier${NO_COLOR}"
            echo
            echo "================================================"
            echo -e "\033[1;31m[CRITICAL WARNING]\033[0m This action is irreversible. Proceed with caution."
            echo "================================================"

            echo "The Clientname is: $clientname"
            echo "The Bundle Id is: $bundle_id"
            echo "The Cloud Account Id is: $cloud_account_id"
            echo "The ENV: $env_identifier"
            echo "The tech Admin: $technical_admin"
            echo "##vso[task.setvariable variable=clientName;isOutput=true;]$clientname"
            echo "##vso[task.setvariable variable=bundleId;isOutput=true;]$bundle_id"
            echo "##vso[task.setvariable variable=cloudAccountId;isOutput=true;]$cloud_account_id"
            echo "##vso[task.setvariable variable=envIdentifier;isOutput=true;]$env_identifier"
            echo "##vso[task.setvariable variable=technicalAdmin;isOutput=true;]$technical_admin"
          name: get_account_details


    - job: Decommissioning_Request_Body
      displayName: "Cosmic Body Deletion Request"
      variables:
        bundle_id: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.bundleId'] ]
        cloud_account_id: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.cloudAccountId'] ]
        env_identifier: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.envIdentifier'] ]
        technical_admin: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.technicalAdmin'] ]
      dependsOn: 
        - Display_Decommisioning_Accout_details
      condition: succeeded()
      steps:
        - script: |
            echo "########## Deletion Request Body Build ################"
            json_content=$(cat << EOF
            {
              "bundleId": $bundle_id,
              "validateOnly": ${{lower(parameters.validateOnly)}},
              "platform": "${{ parameters.platform }}",
              "environments": [{
                "environmentIdentifier": "$env_identifier",
                "cloudAccountId": "$cloud_account_id",
                "intent": "DELETE"
              }],
              "requestorEmail": "${{ parameters.requestorEmail }}",
              "notifyTo": [
                "dtechcommercialcms@deloitte.com"
              ],
              "contacts": {
                "technicalAdministrator": "$technical_admin"
              }
            }
            EOF
            )
            echo "$json_content" > jsonCosmicApiDeleteBody.json
            cat jsonCosmicApiDeleteBody.json
          displayName: 'Post Cosmic Deletion Request'
          
        - task: PublishBuildArtifacts@1
          displayName: 'Publish JSON Artifact'
          inputs:
            PathtoPublish: 'jsonCosmicApiDeleteBody.json'
            ArtifactName: 'sharedData'

    - job: WaitForValidation
      variables:
        clientName: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.clientName'] ]
        envIdentifier: $[ dependencies.Display_Decommisioning_Accout_details.outputs['get_account_details.envIdentifier'] ]
      dependsOn: 
        - Decommissioning_Request_Body
      # condition: eq(parameters.validateOnly, 'false')
      pool: server
      displayName: Wait for approval to create account
      timeoutInMinutes: 45
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 45 # task times out in 30 minutes
          inputs:
            notifyUsers: |
              zouassem@deloitte.fr
            instructions: |
              Please validate the decommissioning of the account with the following details:
                - Platform: ${{ parameters.platform }}
                - Client Name: $clientName
                - Cloud Account Name: ${{ parameters.accountName }}
                - Environment: $envIdentifier
              This action is irreversible. Proceed with caution.

    - job: Wait_for_request_completion
      condition: and(succeeded('Request_Account_Subscription'), eq(dependencies.Account_Check.outputs['accountCheck.skipSubsequentJobs'], 'false'))
      timeoutInMinutes: 30
      dependsOn: 
        - Retrieve_Token
        - WaitForValidation
      variables:
        token: $[ dependencies.Retrieve_Token.outputs['get_jwt_token.jwt_out'] ]
      steps:
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'sharedData'
            downloadPath: '$(System.DefaultWorkingDirectory)'
          displayName: 'Download the JSON'  

        - task: Bash@3
          name: delete_request_call
          displayName: 'Wait for the Environment creation to finish'
          inputs:
            targetType: 'inline'
            script: |
              response=$(curl -s -X POST \
                  --header 'Content-Type: application/json' \
                  --header "Authorization: Bearer $token" \
                  -d "$json_content" \
                  $(cosmic_url)/api/v1/request)
              echo "##[debug]Cosmic response:"
              echo $response | python -m json.tool
              location=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['location'])")
              echo "$location"
              echo "##vso[task.setvariable variable=location;isOutput=true;]$location"

        - task: Bash@3
          name: wait_for_request_completion
          displayName: 'Wait for the Environment creation to finish'
          inputs:
            targetType: 'inline'
            script: |
              SECONDS=0
              while true; do
                echo "##[warning]Checking completion every 60 seconds. $SECONDS seconds elapsed."
                sleep 30
                response=$(curl -s -X GET \
                  --header 'Content-Type:application/json' \
                  --header "Authorization:Bearer $token" \
                  $(cosmic_url)$location)
                echo "##[debug]Cosmic response:"
                echo $response | python -m json.tool
                isValid=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['isValid'])")
                hasError=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['hasError'])")
                isCompleted=$(echo $response | python3 -c "import sys,json; print(json.load(sys.stdin)['request']['isCompleted'])")
                if [[ -z $isValid || -z $hasError || -z $isCompleted ]]; then
                  echo "##vso[task.logissue type=error]Unknown Cosmic error"
                  exit 1
                fi
                if [[ "$isCompleted" == "True" ]]; then
                  if [[ "$isValid" == "True" ]] && [[ "$hasError" == "False" ]]; then
                    break
                  else
                    echo "##vso[task.logissue type=error]Cosmic sent back a validation error"
                    exit 2
                  fi
                fi
              done
